<?php
/**
 * 并行的兼容Flex标准的HTTP客户端
 *
 * 不推荐使用将来可能废弃，建议使用\PG\MSF\Client\Http\Client::goConcurrent($requests)
 *
 * @author camera360_server@camera360.com
 * @copyright Chengdu pinguo Technology Co.,Ltd.
 */

namespace PG\MSF\Client;

use PG\Exception\BusinessException;
use PG\MSF\Base\Core;
use PG\MSF\Client\Http\Client;
use PG\MSF\Coroutine\Dns;

/**
 * Class ConcurrentClient
 * @package PG\MSF\Client
 */
class ConcurrentClient
{
    /**
     * @var array json errors
     */
    protected static $jsonErrors = [
        JSON_ERROR_NONE => null,
        JSON_ERROR_DEPTH => 'Maximum stack depth exceeded',
        JSON_ERROR_STATE_MISMATCH => 'Underflow or the modes mismatch',
        JSON_ERROR_CTRL_CHAR => 'Unexpected control character found',
        JSON_ERROR_SYNTAX => 'Syntax error, malformed JSON',
        JSON_ERROR_UTF8 => 'Malformed UTF-8 characters, possibly incorrectly encoded'
    ];

    /**
     * 并行请求
     *
     * @param array $requests 请求的数据
     * @param Core $parent Core实例（通常为Controller实例）
     * @return array
     */
    public static function request(array $requests, Core $parent)
    {
    }

    /**
     * 解析返回值
     *
     * @param array $request 请求参数
     * @param array $responseBody 响应正文
     * @return mixed
     * @throws BusinessException
     */
    private static function parseResponse(array $request, $responseBody)
    {
        if (isset($responseBody['status']) == false
            || array_key_exists('data', $responseBody) == false
            || isset($responseBody['message']) == false
        ) {
            throw new BusinessException('Response The result array is incomplete. response=' . json_encode($responseBody) . ' Request: ' . json_encode($request));
        }
        if ($responseBody['status'] != 200) {
            throw new BusinessException('Response returns the result status is not equal to 200. response=' . json_encode($responseBody) . ' Request: ' . json_encode($request));
        }

        return $responseBody['data'];
    }

    /**
     * 拿到json解析最后出现的错误信息
     *
     * @return mixed|string
     */
    private static function jsonLastErrorMsg()
    {
        $error = json_last_error();
        return array_key_exists($error, static::$jsonErrors) ? static::$jsonErrors[$error] : "Unknown error ({$error})";
    }
}

